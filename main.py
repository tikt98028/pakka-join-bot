import os
import logging
import asyncio
import aiohttp  # üÜï –¥–ª—è self-ping
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, ContextTypes, ChatJoinRequestHandler
)
from dotenv import load_dotenv
from telegram.error import BadRequest

# üîê Load env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://pakka-join-bot.onrender.com{WEBHOOK_PATH}"
SELF_PING_URL = "https://pakka-join-bot.onrender.com"  # üÜï

# üí¨
WELCOME_MESSAGE = "–ü—Ä–∏–≤—ñ—Ç üëã –î—è–∫—É—é, —â–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É! –Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –Ω–∞–ø–∏—à–∏ —Å—é–¥–∏."

# üß† Logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# ‚öôÔ∏è Init FastAPI
app = FastAPI()
telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()

# ‚úÖ Handler
async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.chat_join_request.from_user
    chat_id = update.chat_join_request.chat.id
    username = f"@{user.username}" if user.username else f"ID:{user.id}"

    try:
        await context.bot.approve_chat_join_request(chat_id=chat_id, user_id=user.id)
        logging.info(f"‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ {username}")
    except BadRequest as e:
        if "hide_requester_missing" in str(e):
            logging.warning(f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ö–≤–∞–ª–∏—Ç–∏ {username}: hide_requester_missing")
        else:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ {username}: {e}")

    try:
        await context.bot.send_message(chat_id=user.id, text=WELCOME_MESSAGE)
        logging.info(f"üì¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {username}")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ø–∏—Å–∞—Ç–∏ {username}: {e}")

# üîÅ Self-ping loop
async def keep_awake():
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(SELF_PING_URL) as resp:
                    logging.info(f"üåê Self-ping —Å—Ç–∞—Ç—É—Å: {resp.status}")
            except Exception as e:
                logging.warning(f"üõë Self-ping –ø–æ–º–∏–ª–∫–∞: {e}")
            await asyncio.sleep(300)  # –∫–æ–∂–Ω—ñ 5 —Ö–≤ (300 —Å–µ–∫)

# üöÄ Startup
@app.on_event("startup")
async def on_startup():
    telegram_app.add_handler(ChatJoinRequestHandler(approve))
    await telegram_app.initialize()
    await telegram_app.start()
    await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
    logging.info("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    # üîÉ –ó–∞–ø—É—Å–∫ self-ping
    asyncio.create_task(keep_awake())

# üßπ Shutdown
@app.on_event("shutdown")
async def on_shutdown():
    await telegram_app.stop()
    await telegram_app.shutdown()

# üì© Webhook handler
@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"status": "ok"}
