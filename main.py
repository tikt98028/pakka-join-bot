import os
import logging
import asyncio
import aiohttp
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes, ChatJoinRequestHandler
)
from dotenv import load_dotenv
from telegram.error import BadRequest

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–æ–∫–µ–Ω
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"https://pakka-join-bot.onrender.com{WEBHOOK_PATH}"
SELF_PING_URL = "https://pakka-join-bot.onrender.com"  # üëà –î–ª—è –∞–Ω—Ç–∏-—Å–Ω—É

# üß† –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FastAPI —ñ Telegram bot
app = FastAPI()
telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()

# üîÅ –ü—ñ–Ω–≥ –±–æ—Ç–∞ —â–æ–± –Ω–µ –∑–∞—Å–∏–Ω–∞–≤
async def keep_awake():
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(SELF_PING_URL) as resp:
                    logging.info(f"üåê Self-ping: {resp.status}")
            except Exception as e:
                logging.warning(f"üõë Self-ping error: {e}")
            await asyncio.sleep(300)  # –∫–æ–∂–Ω—ñ 5 —Ö–≤

# ‚úÖ –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.chat_join_request.from_user
    chat_id = update.chat_join_request.chat.id
    username = f"@{user.username}" if user.username else f"ID:{user.id}"

    try:
        await context.bot.approve_chat_join_request(chat_id=chat_id, user_id=user.id)
        logging.info(f"‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Ç –≤—ñ–¥ {username}")
    except BadRequest as e:
        if "hide_requester_missing" in str(e):
            logging.warning(f"‚ö†Ô∏è Telegram –Ω–µ –¥–æ–∑–≤–æ–ª—è—î —Å—Ö–≤–∞–ª–∏—Ç–∏ {username}")
        else:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ {username}: {e}")

    # ‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è + –∫–Ω–æ–ø–∫–∞
    text = (
        "üöÄ You‚Äôve just unlocked access to Pakka Profit ‚Äî\n"
        "Where signals = real profits üí∏\n\n"
        "üéØ Accuracy up to 98%\n"
        "üìà No experience needed ‚Äî just copy & earn\n"
        "üéÅ Your first signal is 100% FREE\n\n"
        "‚è≥ Hurry! This free access is available for the next 30 minutes only.\n"
        "After that, signals go private for VIP members.\n\n"
        "üëá Tap now and grab your free signal:"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ GET FREE SIGNAL", url="https://t.me/m/nSRnEuc5MjJi")]
    ])

    try:
        await context.bot.send_message(
            chat_id=user.id,
            text=text,
            reply_markup=keyboard
        )
        logging.info(f"üì¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {username}")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ø–∏—Å–∞—Ç–∏ {username}: {e}")

# üöÄ –ó–∞–ø—É—Å–∫
@app.on_event("startup")
async def on_startup():
    telegram_app.add_handler(ChatJoinRequestHandler(approve))
    await telegram_app.initialize()
    await telegram_app.start()
    await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
    logging.info("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    asyncio.create_task(keep_awake())  # –ó–∞–ø—É—Å–∫ self-ping

@app.on_event("shutdown")
async def on_shutdown():
    await telegram_app.stop()
    await telegram_app.shutdown()

@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"status": "ok"}
